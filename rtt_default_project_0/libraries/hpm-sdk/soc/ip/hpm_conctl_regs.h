/*
 * Copyright (c) 2021 hpmicro
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */


#ifndef HPM_CONCTL_H
#define HPM_CONCTL_H

typedef struct {
    __RW uint32_t CTRL0;                       /* 0x0:  */
    __R  uint8_t  RESERVED0[4];                /* 0x4 - 0x7: Reserved */
    __RW uint32_t CTRL2;                       /* 0x8:  */
    __RW uint32_t CTRL3;                       /* 0xC:  */
    __RW uint32_t CTRL4;                       /* 0x10:  */
    __RW uint32_t CTRL5;                       /* 0x14:  */
} CONCTL_Type;


/* Bitfield definition for register: CTRL0 */
/* Bitfield definition for register: CTRL2 */
/*
 * ENET0_IRQ_EN (RW)
 *
 * 
 */
#define CONCTL_CTRL2_ENET0_IRQ_EN_MASK (0xF8000000UL)
#define CONCTL_CTRL2_ENET0_IRQ_EN_SHIFT (27U)
#define CONCTL_CTRL2_ENET0_IRQ_EN_SET(x) (((uint32_t)(x) << CONCTL_CTRL2_ENET0_IRQ_EN_SHIFT) & CONCTL_CTRL2_ENET0_IRQ_EN_MASK)
#define CONCTL_CTRL2_ENET0_IRQ_EN_GET(x) (((uint32_t)(x) & CONCTL_CTRL2_ENET0_IRQ_EN_MASK) >> CONCTL_CTRL2_ENET0_IRQ_EN_SHIFT)

/*
 * PAD_OE_ETH0_REFCLK (RW)
 *
 * 
 */
#define CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_MASK (0x80000UL)
#define CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_SHIFT (19U)
#define CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_SET(x) (((uint32_t)(x) << CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_SHIFT) & CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_MASK)
#define CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_GET(x) (((uint32_t)(x) & CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_MASK) >> CONCTL_CTRL2_PAD_OE_ETH0_REFCLK_SHIFT)

/*
 * ENET0_PHY_INTF_SEL (RW)
 *
 * 000:Reserved
 * 001:RGMII
 * 100:RMII
 * 111:Reserved
 */
#define CONCTL_CTRL2_ENET0_PHY_INTF_SEL_MASK (0xE000U)
#define CONCTL_CTRL2_ENET0_PHY_INTF_SEL_SHIFT (13U)
#define CONCTL_CTRL2_ENET0_PHY_INTF_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL2_ENET0_PHY_INTF_SEL_SHIFT) & CONCTL_CTRL2_ENET0_PHY_INTF_SEL_MASK)
#define CONCTL_CTRL2_ENET0_PHY_INTF_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL2_ENET0_PHY_INTF_SEL_MASK) >> CONCTL_CTRL2_ENET0_PHY_INTF_SEL_SHIFT)

/*
 * ENET0_FLOWCTRL (RW)
 *
 * 
 */
#define CONCTL_CTRL2_ENET0_FLOWCTRL_MASK (0x1000U)
#define CONCTL_CTRL2_ENET0_FLOWCTRL_SHIFT (12U)
#define CONCTL_CTRL2_ENET0_FLOWCTRL_SET(x) (((uint32_t)(x) << CONCTL_CTRL2_ENET0_FLOWCTRL_SHIFT) & CONCTL_CTRL2_ENET0_FLOWCTRL_MASK)
#define CONCTL_CTRL2_ENET0_FLOWCTRL_GET(x) (((uint32_t)(x) & CONCTL_CTRL2_ENET0_FLOWCTRL_MASK) >> CONCTL_CTRL2_ENET0_FLOWCTRL_SHIFT)

/*
 * ENET0_RMII_TXCLK_SEL (RW)
 *
 * default from pad(50M out to pad then in)
 * set to use internal clk
 */
#define CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_MASK (0x400U)
#define CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_SHIFT (10U)
#define CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_SHIFT) & CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_MASK)
#define CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_MASK) >> CONCTL_CTRL2_ENET0_RMII_TXCLK_SEL_SHIFT)

/* Bitfield definition for register: CTRL3 */
/*
 * ENET1_IRQ_EN (RW)
 *
 * 
 */
#define CONCTL_CTRL3_ENET1_IRQ_EN_MASK (0xF8000000UL)
#define CONCTL_CTRL3_ENET1_IRQ_EN_SHIFT (27U)
#define CONCTL_CTRL3_ENET1_IRQ_EN_SET(x) (((uint32_t)(x) << CONCTL_CTRL3_ENET1_IRQ_EN_SHIFT) & CONCTL_CTRL3_ENET1_IRQ_EN_MASK)
#define CONCTL_CTRL3_ENET1_IRQ_EN_GET(x) (((uint32_t)(x) & CONCTL_CTRL3_ENET1_IRQ_EN_MASK) >> CONCTL_CTRL3_ENET1_IRQ_EN_SHIFT)

/*
 * PAD_OE_ETH1_REFCLK (RW)
 *
 * 
 */
#define CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_MASK (0x80000UL)
#define CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_SHIFT (19U)
#define CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_SET(x) (((uint32_t)(x) << CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_SHIFT) & CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_MASK)
#define CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_GET(x) (((uint32_t)(x) & CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_MASK) >> CONCTL_CTRL3_PAD_OE_ETH1_REFCLK_SHIFT)

/*
 * ENET1_PTPI_SEL (RW)
 *
 * 
 */
#define CONCTL_CTRL3_ENET1_PTPI_SEL_MASK (0x60000UL)
#define CONCTL_CTRL3_ENET1_PTPI_SEL_SHIFT (17U)
#define CONCTL_CTRL3_ENET1_PTPI_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL3_ENET1_PTPI_SEL_SHIFT) & CONCTL_CTRL3_ENET1_PTPI_SEL_MASK)
#define CONCTL_CTRL3_ENET1_PTPI_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL3_ENET1_PTPI_SEL_MASK) >> CONCTL_CTRL3_ENET1_PTPI_SEL_SHIFT)

/*
 * ENET1_PTPO_SEL (RW)
 *
 * 
 */
#define CONCTL_CTRL3_ENET1_PTPO_SEL_MASK (0x10000UL)
#define CONCTL_CTRL3_ENET1_PTPO_SEL_SHIFT (16U)
#define CONCTL_CTRL3_ENET1_PTPO_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL3_ENET1_PTPO_SEL_SHIFT) & CONCTL_CTRL3_ENET1_PTPO_SEL_MASK)
#define CONCTL_CTRL3_ENET1_PTPO_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL3_ENET1_PTPO_SEL_MASK) >> CONCTL_CTRL3_ENET1_PTPO_SEL_SHIFT)

/*
 * ENET1_PHY_INTF_SEL (RW)
 *
 * 
 */
#define CONCTL_CTRL3_ENET1_PHY_INTF_SEL_MASK (0xE000U)
#define CONCTL_CTRL3_ENET1_PHY_INTF_SEL_SHIFT (13U)
#define CONCTL_CTRL3_ENET1_PHY_INTF_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL3_ENET1_PHY_INTF_SEL_SHIFT) & CONCTL_CTRL3_ENET1_PHY_INTF_SEL_MASK)
#define CONCTL_CTRL3_ENET1_PHY_INTF_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL3_ENET1_PHY_INTF_SEL_MASK) >> CONCTL_CTRL3_ENET1_PHY_INTF_SEL_SHIFT)

/*
 * ENET1_FLOWCTRL (RW)
 *
 * 
 */
#define CONCTL_CTRL3_ENET1_FLOWCTRL_MASK (0x1000U)
#define CONCTL_CTRL3_ENET1_FLOWCTRL_SHIFT (12U)
#define CONCTL_CTRL3_ENET1_FLOWCTRL_SET(x) (((uint32_t)(x) << CONCTL_CTRL3_ENET1_FLOWCTRL_SHIFT) & CONCTL_CTRL3_ENET1_FLOWCTRL_MASK)
#define CONCTL_CTRL3_ENET1_FLOWCTRL_GET(x) (((uint32_t)(x) & CONCTL_CTRL3_ENET1_FLOWCTRL_MASK) >> CONCTL_CTRL3_ENET1_FLOWCTRL_SHIFT)

/*
 * ENET1_RMII_TXCLK_SEL (RW)
 *
 * 
 */
#define CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_MASK (0x400U)
#define CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_SHIFT (10U)
#define CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_SHIFT) & CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_MASK)
#define CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_MASK) >> CONCTL_CTRL3_ENET1_RMII_TXCLK_SEL_SHIFT)

/* Bitfield definition for register: CTRL4 */
/*
 * SDXC0_IRQ_EN (RW)
 *
 * 
 */
#define CONCTL_CTRL4_SDXC0_IRQ_EN_MASK (0xC0000000UL)
#define CONCTL_CTRL4_SDXC0_IRQ_EN_SHIFT (30U)
#define CONCTL_CTRL4_SDXC0_IRQ_EN_SET(x) (((uint32_t)(x) << CONCTL_CTRL4_SDXC0_IRQ_EN_SHIFT) & CONCTL_CTRL4_SDXC0_IRQ_EN_MASK)
#define CONCTL_CTRL4_SDXC0_IRQ_EN_GET(x) (((uint32_t)(x) & CONCTL_CTRL4_SDXC0_IRQ_EN_MASK) >> CONCTL_CTRL4_SDXC0_IRQ_EN_SHIFT)

/*
 * SDXC0_GPR_TUNING_CARD_CLK_SEL (RW)
 *
 * for card clock DLL, default 0
 */
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_MASK (0xF800000UL)
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_SHIFT (23U)
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_SHIFT) & CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_MASK)
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_MASK) >> CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_SHIFT)

/*
 * SDXC0_GPR_TUNING_STROBE_SEL (RW)
 *
 * for strobe DLL, default 7taps(1ns)
 */
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_MASK (0x7C0000UL)
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_SHIFT (18U)
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_SHIFT) & CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_MASK)
#define CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_MASK) >> CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_SHIFT)

/*
 * SDXC0_GPR_STROBE_IN_ENABLE (RW)
 *
 * enable strobe clock, maybe used when update strobe DLL
 */
#define CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_MASK (0x20000UL)
#define CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_SHIFT (17U)
#define CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_SET(x) (((uint32_t)(x) << CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_SHIFT) & CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_MASK)
#define CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_GET(x) (((uint32_t)(x) & CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_MASK) >> CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_SHIFT)

/* Bitfield definition for register: CTRL5 */
/*
 * SDXC1_IRQ_EN (RW)
 *
 * 
 */
#define CONCTL_CTRL5_SDXC1_IRQ_EN_MASK (0xC0000000UL)
#define CONCTL_CTRL5_SDXC1_IRQ_EN_SHIFT (30U)
#define CONCTL_CTRL5_SDXC1_IRQ_EN_SET(x) (((uint32_t)(x) << CONCTL_CTRL5_SDXC1_IRQ_EN_SHIFT) & CONCTL_CTRL5_SDXC1_IRQ_EN_MASK)
#define CONCTL_CTRL5_SDXC1_IRQ_EN_GET(x) (((uint32_t)(x) & CONCTL_CTRL5_SDXC1_IRQ_EN_MASK) >> CONCTL_CTRL5_SDXC1_IRQ_EN_SHIFT)

/*
 * SDXC1_GPR_TUNING_CARD_CLK_SEL (RW)
 *
 * 
 */
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_MASK (0xF800000UL)
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_SHIFT (23U)
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_SHIFT) & CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_MASK)
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_MASK) >> CONCTL_CTRL5_SDXC1_GPR_TUNING_CARD_CLK_SEL_SHIFT)

/*
 * SDXC1_GPR_TUNING_STROBE_SEL (RW)
 *
 * 
 */
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_MASK (0x7C0000UL)
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_SHIFT (18U)
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_SET(x) (((uint32_t)(x) << CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_SHIFT) & CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_MASK)
#define CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_GET(x) (((uint32_t)(x) & CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_MASK) >> CONCTL_CTRL5_SDXC1_GPR_TUNING_STROBE_SEL_SHIFT)

/*
 * SDXC1_GPR_STROBE_IN_ENABLE (RW)
 *
 * 
 */
#define CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_MASK (0x20000UL)
#define CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_SHIFT (17U)
#define CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_SET(x) (((uint32_t)(x) << CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_SHIFT) & CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_MASK)
#define CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_GET(x) (((uint32_t)(x) & CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_MASK) >> CONCTL_CTRL5_SDXC1_GPR_STROBE_IN_ENABLE_SHIFT)




#endif /* HPM_CONCTL_H */