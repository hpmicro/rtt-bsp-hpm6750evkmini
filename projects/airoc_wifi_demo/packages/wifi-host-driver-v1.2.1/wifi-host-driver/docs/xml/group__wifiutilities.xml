<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__wifiutilities" kind="group">
    <compoundname>wifiutilities</compoundname>
    <title>WHD Wi-Fi Utility API</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wifiutilities_1gad00fb03d006c24cbcef95f3f854b7684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_channel</definition>
        <argsstring>(whd_interface_t ifp, uint32_t channel)</argsstring>
        <name>whd_wifi_set_channel</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Set the current channel on the WLAN radio. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>On most WLAN devices this will set the channel for both AP <emphasis>AND</emphasis> STA (since there is only one radio - it cannot be on two channels simulaneously)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired channel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the channel was successfully set Error code if the channel was not successfully set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga5bd4f005033f0b0866813fa02044a1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_channel</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *channel)</argsstring>
        <name>whd_wifi_get_channel</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the current channel on the WLAN radio. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>On most WLAN devices this will get the channel for both AP <emphasis>AND</emphasis> STA (since there is only one radio - it cannot be on two channels simulaneously)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive the current channel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the channel was successfully retrieved Error code if the channel was not successfully retrieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaa46dc0ebd537da9b2c2cfba451be7a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_channels</definition>
        <argsstring>(whd_interface_t ifp, whd_list_t *channel_list)</argsstring>
        <name>whd_wifi_get_channels</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__list__t" kindref="compound">whd_list_t</ref> *</type>
          <declname>channel_list</declname>
        </param>
        <briefdescription>
<para>Gets the supported channels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_list</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store list of the supported channels and max channel is MAXCHANNEL</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the active connections was successfully read WHD_ERROR if the active connections was not successfully read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gab13513230a025dbfc29df76b0ed10222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_passphrase</definition>
        <argsstring>(whd_interface_t ifp, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>whd_wifi_set_passphrase</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Set the passphrase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The security key (passphrase) which is to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the key is set Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga3b0acddff0ff8c467f111abcb3d2b43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_sae_password</definition>
        <argsstring>(whd_interface_t ifp, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>whd_wifi_sae_password</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Set the SAE password. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The security key (password) which is to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the key is set Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga15806d2cb87d117b4dcaf51bc1c1b99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_offload_config</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ol_feat, uint32_t reset)</argsstring>
        <name>whd_wifi_offload_config</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ol_feat</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>reset</declname>
        </param>
        <briefdescription>
<para>Set the offload configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ol_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>Offload Skip bitmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>reset or set configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the offload config is set/reset Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gafebf9c76eea2b56e4c2916cc15f34fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_offload_ipv4_update</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ol_feat, uint32_t ipv4_addr, whd_bool_t is_add)</argsstring>
        <name>whd_wifi_offload_ipv4_update</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ol_feat</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ipv4_addr</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a7cd94a03f2e7e6aab7217ed559c7a0ac" kindref="member">whd_bool_t</ref></type>
          <declname>is_add</declname>
        </param>
        <briefdescription>
<para>Update IPV4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ol_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>Offload Skip bitmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipv4_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>set ipv4 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_add</parametername>
</parameternamelist>
<parameterdescription>
<para>To add or delete IPV4 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the ipv4 address updated or not Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaf0e49257ee875d148d37cc67099ee0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_offload_ipv6_update</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ol_feat, uint32_t *ipv6_addr, uint8_t type, whd_bool_t is_add)</argsstring>
        <name>whd_wifi_offload_ipv6_update</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ol_feat</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>ipv6_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a7cd94a03f2e7e6aab7217ed559c7a0ac" kindref="member">whd_bool_t</ref></type>
          <declname>is_add</declname>
        </param>
        <briefdescription>
<para>Update IPV6 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ol_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>Offload Skip bitmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipv6_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>set ipv6 address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>set 0:unicast 1:anycast</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_add</parametername>
</parameternamelist>
<parameterdescription>
<para>To add or delete IPV6 address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the ipv6 address updated or not Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga185890900617bcbb760ed090975ea977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_offload_enable</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ol_feat, uint32_t enable)</argsstring>
        <name>whd_wifi_offload_enable</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ol_feat</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable the offload module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ol_feat</parametername>
</parameternamelist>
<parameterdescription>
<para>Offload Skip bitmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable/Disable offload module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when offload module enabled or not Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gac12db78aeb2fda7e6e73ce26926477d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_configure_wowl</definition>
        <argsstring>(whd_interface_t ifp, uint32_t set_wowl)</argsstring>
        <name>whd_configure_wowl</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set_wowl</declname>
        </param>
        <briefdescription>
<para>Configure the offload module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_wowl</parametername>
</parameternamelist>
<parameterdescription>
<para>value indicates, which are all wowl bits to be set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when offload module enabled or not Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga6a213e11cb2201d251d5bf111f87e239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_keepalive_config</definition>
        <argsstring>(whd_interface_t ifp, whd_keep_alive_t *packet, uint8_t flag)</argsstring>
        <name>whd_wifi_keepalive_config</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__keep__alive" kindref="compound">whd_keep_alive_t</ref> *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Configure the Keep Alive offload module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>whd period,len_bytes &amp; Data parameter structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to set NULL(0)/NAT(1) keepalive</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when offload module enabled or not Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga92b6063464e66c62c633fc19ca73d68c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_configure_tko_offload</definition>
        <argsstring>(whd_interface_t ifp, whd_bool_t enable)</argsstring>
        <name>whd_configure_tko_offload</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a7cd94a03f2e7e6aab7217ed559c7a0ac" kindref="member">whd_bool_t</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Configure the TKO offload module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable/Disable TCP Keepalive offload</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when offload module enabled or not Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gadace029a782307a9c1c0973095cbda69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_configure_tko_filter</definition>
        <argsstring>(whd_interface_t ifp, whd_tko_auto_filter_t *whd_filter, uint8_t filter_flag)</argsstring>
        <name>whd_configure_tko_filter</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_tko_auto_filter_t *</type>
          <declname>whd_filter</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_flag</declname>
        </param>
        <briefdescription>
<para>Configure the TKO filter module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>whd_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>wl_filter structure buffer from Firmware </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>To set filter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when offload module enabled or not Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga6b3c6e45e7311893f1019124d2fe85b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_enable_sup_set_passphrase</definition>
        <argsstring>(whd_interface_t ifp, const uint8_t *security_key_psk, uint8_t psk_length, whd_security_t auth_type)</argsstring>
        <name>whd_wifi_enable_sup_set_passphrase</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key_psk</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>psk_length</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref></type>
          <declname>auth_type</declname>
        </param>
        <briefdescription>
<para>Enable WHD internal supplicant and set WPA2 passphrase in case of WPA3/WPA2 transition mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key_psk</parametername>
</parameternamelist>
<parameterdescription>
<para>The security key (passphrase) which is to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psk_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication type: <ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059af4d58bc2335113f0c70abdbd3019bb61" kindref="member">WHD_SECURITY_WPA3_WPA2_PSK</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the supplicant variable and wpa2 passphrase is set Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gae9d18a43c3e8e09f38ecb5adbda450b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_pmk</definition>
        <argsstring>(whd_interface_t ifp, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>whd_wifi_set_pmk</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Set the PMK Key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The security key (PMK) which is to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the PMK(It must be 32 bytes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the key is set Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga96d5646b67b4ae5ec78f1a23789caca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_roam_time_threshold</definition>
        <argsstring>(whd_interface_t ifp, uint32_t roam_time_threshold)</argsstring>
        <name>whd_wifi_set_roam_time_threshold</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>roam_time_threshold</declname>
        </param>
        <briefdescription>
<para>Set the Roam time threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roam_time_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum roam time threshold which is to be set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the roam_time_threshold is set Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gadcd78be7647dc8a5a1040d40950aff9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_enable_supplicant</definition>
        <argsstring>(whd_interface_t ifp, whd_security_t auth_type)</argsstring>
        <name>whd_wifi_enable_supplicant</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1aaeeea5666743710aa4f01ff264b27059" kindref="member">whd_security_t</ref></type>
          <declname>auth_type</declname>
        </param>
        <briefdescription>
<para>Enable WHD internal supplicant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS when the supplicant variable is set Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaff1c3d13edc4ceee2bebaeb93ec7a9c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_pmksa</definition>
        <argsstring>(whd_interface_t ifp, const pmkid_t *pmkid)</argsstring>
        <name>whd_wifi_set_pmksa</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="whd__types_8h_1a41a5921cae8749f8c7b96f216ff318a3" kindref="member">pmkid_t</ref> *</type>
          <declname>pmkid</declname>
        </param>
        <briefdescription>
<para>Set PMKID in Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmkid</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to BSSID and PMKID(16 bytes)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="596" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga112a1fa7274b896e41ee98f88f943c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_pmkid_clear</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_pmkid_clear</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Clear all PMKIDs in Device (WLAN), especially the PMKIDs in Supplicant module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gabd75a10a7f258a42cb4620db255d239a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_rssi</definition>
        <argsstring>(whd_interface_t ifp, int32_t *rssi)</argsstring>
        <name>whd_wifi_get_rssi</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>rssi</declname>
        </param>
        <briefdescription>
<para>Retrieve the latest RSSI value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rssi</parametername>
</parameternamelist>
<parameterdescription>
<para>The location where the RSSI value will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the RSSI was successfully retrieved Error code if the RSSI was not retrieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga16aa6ed1a8531775420a42b677401359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_roam_time_threshold</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *roam_time_threshold)</argsstring>
        <name>whd_wifi_get_roam_time_threshold</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>roam_time_threshold</declname>
        </param>
        <briefdescription>
<para>Retrieve the latest Roam time threshold value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roam_time_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The location where the roam time threshold value will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the roam time threshold was successfully retrieved Error code if the roam time threshold was not retrieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="624" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gac929fa29049cd8b316cdab43099d5ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_ap_client_rssi</definition>
        <argsstring>(whd_interface_t ifp, int32_t *rssi, const whd_mac_t *client_mac)</argsstring>
        <name>whd_wifi_get_ap_client_rssi</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>rssi</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>client_mac</declname>
        </param>
        <briefdescription>
<para>Retrieve the associated STA&apos;s RSSI value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rssi</parametername>
</parameternamelist>
<parameterdescription>
<para>: The location where the RSSI value will be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_mac</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to associated client&apos;s MAC address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS : if the RSSI was successfully retrieved Error code : if the RSSI was not retrieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga56304c5255a0ac38892b7d071e5b141c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_mac_address</definition>
        <argsstring>(whd_interface_t ifp, whd_mac_t *mac)</argsstring>
        <name>whd_wifi_get_mac_address</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Retrieves the current Media Access Control (MAC) address (or Ethernet hardware address) of the 802.11 device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable that the current MAC address will be written to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaa7cbd36c92253606be155e88631167c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_bssid</definition>
        <argsstring>(whd_interface_t ifp, whd_mac_t *bssid)</argsstring>
        <name>whd_wifi_get_bssid</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>bssid</declname>
        </param>
        <briefdescription>
<para>Get the BSSID of the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the whd_interface_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bssid</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the BSSID address (mac address) if associated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga7b501123c8b93e54e9696c96eba2f459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_register_multicast_address</definition>
        <argsstring>(whd_interface_t ifp, const whd_mac_t *mac)</argsstring>
        <name>whd_wifi_register_multicast_address</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Registers interest in a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para>Once a multicast address has been registered, all packets detected on the medium destined for that address are forwarded to the host. Otherwise they are ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet MAC address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the address was registered successfully Error code if the address was not registered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="882" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga76cb42ea0d5a3f4e3884fcfa8a35fe41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_unregister_multicast_address</definition>
        <argsstring>(whd_interface_t ifp, const whd_mac_t *mac)</argsstring>
        <name>whd_wifi_unregister_multicast_address</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__mac__t" kindref="compound">whd_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Unregisters interest in a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para>Once a multicast address has been unregistered, all packets detected on the medium destined for that address are ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet MAC address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the address was unregistered successfully Error code if the address was not unregistered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga49d6f2b4f41173e0c691ace247aa654d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_listen_interval</definition>
        <argsstring>(whd_interface_t ifp, uint8_t listen_interval, whd_listen_interval_time_unit_t time_unit)</argsstring>
        <name>whd_wifi_set_listen_interval</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>listen_interval</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a98ac1a2590358bafac6a2da287034638" kindref="member">whd_listen_interval_time_unit_t</ref></type>
          <declname>time_unit</declname>
        </param>
        <briefdescription>
<para>Sets the 802.11 powersave listen interval for a Wi-Fi client, and communicates the listen interval to the Access Point. </para>
        </briefdescription>
        <detaileddescription>
<para>The listen interval will be set to (listen_interval x time_unit) seconds.</para>
<para>The default value for the listen interval is 0. With the default value of 0 set, the Wi-Fi device wakes to listen for AP beacons every DTIM period.</para>
<para>If the DTIM listen interval is non-zero, the DTIM listen interval will over ride the beacon listen interval value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listen_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired beacon listen interval </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The listen interval time unit; options are beacon period or DTIM period.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS If the listen interval was successfully set. Error code If the listen interval was not successfully set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga6784a1eb2c42fda8ec7d037da056cb1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_listen_interval</definition>
        <argsstring>(whd_interface_t ifp, whd_listen_interval_t *li)</argsstring>
        <name>whd_wifi_get_listen_interval</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__listen__interval__t" kindref="compound">whd_listen_interval_t</ref> *</type>
          <declname>li</declname>
        </param>
        <briefdescription>
<para>Gets the current value of all beacon listen interval variables. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>li</parametername>
</parameternamelist>
<parameterdescription>
<para>Powersave listen interval values<itemizedlist>
<listitem><para>listen_interval_beacon : The current value of the listen interval set as a multiple of the beacon period</para>
</listitem><listitem><para>listen_interval_dtim : The current value of the listen interval set as a multiple of the DTIM period</para>
</listitem><listitem><para>listen_interval_assoc : The current value of the listen interval sent to access points in an association request frame</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS If all listen interval values are read successfully Error code If at least one of the listen interval values are NOT read successfully </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaf8089b2625e77498fb3fbe117c5b6886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_is_ready_to_transceive</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_wifi_is_ready_to_transceive</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Determines if a particular interface is ready to transceive ethernet packets. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the interface is ready to transceive ethernet packets WHD_NOTFOUND no AP with a matching SSID was found WHD_NOT_AUTHENTICATED Matching AP was found but it won&apos;t let you authenticate. This can occur if this device is in the block list on the AP. WHD_NOT_KEYED Device has authenticated and associated but has not completed the key exchange. This can occur if the passphrase is incorrect. Error code if the interface is not ready to transceive ethernet packets </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="942" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gad19147b67def79fa14cd54f587004555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_acparams</definition>
        <argsstring>(whd_interface_t ifp, whd_edcf_ac_param_t *acp)</argsstring>
        <name>whd_wifi_get_acparams</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_edcf_ac_param_t *</type>
          <declname>acp</declname>
        </param>
        <briefdescription>
<para>Retrieve the latest STA EDCF AC parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the latest Station (STA) interface EDCF (Enhanced Distributed Coordination Function) Access Category parameters</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acp</parametername>
</parameternamelist>
<parameterdescription>
<para>The location where the array of AC parameters will be stored</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the AC Parameters were successfully retrieved Error code if the AC Parameters were not retrieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga8cb13597c33e7e8c0549e88c561129e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_manage_custom_ie</definition>
        <argsstring>(whd_interface_t ifp, whd_custom_ie_action_t action, const uint8_t *oui, uint8_t subtype, const void *data, uint16_t length, uint16_t which_packets)</argsstring>
        <name>whd_wifi_manage_custom_ie</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a8be1026494a86f0ceeebb2dcbf092cbd" kindref="member">whd_custom_ie_action_t</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>oui</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subtype</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>which_packets</declname>
        </param>
        <briefdescription>
<para>Manage the addition and removal of custom IEs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to take (add or remove IE) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oui</parametername>
</parameternamelist>
<parameterdescription>
<para>the oui of the custom IE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the IE sub-type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the buffer that hold the custom IE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the buffer pointed to by &apos;data&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which_packets</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask to indicate in which all packets this IE should be included. See whd_ie_packet_flag_t.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS if the custom IE action was successful Error code if the custom IE action failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="974" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gad2a7949bde2a0e578be1288a727cc82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_send_action_frame</definition>
        <argsstring>(whd_interface_t ifp, whd_af_params_t *af_params)</argsstring>
        <name>whd_wifi_send_action_frame</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_af_params_t *</type>
          <declname>af_params</declname>
        </param>
        <briefdescription>
<para>Send a pre-prepared action frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>af_params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-prepared action frame structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="985" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga48cd0946d2277a26ff6ddb4e601d7601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_send_auth_frame</definition>
        <argsstring>(whd_interface_t ifp, whd_auth_params_t *auth_params)</argsstring>
        <name>whd_wifi_send_auth_frame</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a8f2ad68c18064e7129ad1828429f4b08" kindref="member">whd_auth_params_t</ref> *</type>
          <declname>auth_params</declname>
        </param>
        <briefdescription>
<para>Send a pre-prepared authentication frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a pre-prepared authentication frame structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="994" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gac2fb4db61762739fa1153b30e024e816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_he_omi</definition>
        <argsstring>(whd_interface_t ifp, whd_he_omi_params_t *he_omi_params)</argsstring>
        <name>whd_wifi_he_omi</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__he__omi__params__t" kindref="compound">whd_he_omi_params_t</ref> *</type>
          <declname>he_omi_params</declname>
        </param>
        <briefdescription>
<para>Configure HE OM Control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>he_omi_params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to he_omi parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1003" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga70f6401cd89d881beede2c93e43e3c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_bss_max_idle</definition>
        <argsstring>(whd_interface_t ifp, uint16_t period)</argsstring>
        <name>whd_wifi_bss_max_idle</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Configure BSS Max Idle Time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>The bss max idle period time unit(seconds)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1012" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga6512665ab2b6915c8070bf1b26ba75d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_itwt_setup</definition>
        <argsstring>(whd_interface_t ifp, whd_itwt_setup_params_t *twt_params)</argsstring>
        <name>whd_wifi_itwt_setup</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__itwt__setup__params__t" kindref="compound">whd_itwt_setup_params_t</ref> *</type>
          <declname>twt_params</declname>
        </param>
        <briefdescription>
<para>Trigger individual TWT session(used by STA) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twt_params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to itwt_setup parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga82a85511a31e95f52b84d6cd12798c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_btwt_join</definition>
        <argsstring>(whd_interface_t ifp, whd_btwt_join_params_t *twt_params)</argsstring>
        <name>whd_wifi_btwt_join</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__btwt__join__params__t" kindref="compound">whd_btwt_join_params_t</ref> *</type>
          <declname>twt_params</declname>
        </param>
        <briefdescription>
<para>Trigger Join broadcast TWT session(used by STA) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twt_params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to btwt_join parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga41227b9976b2fc20e8b28c32408bfbe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_twt_teardown</definition>
        <argsstring>(whd_interface_t ifp, whd_twt_teardown_params_t *twt_params)</argsstring>
        <name>whd_wifi_twt_teardown</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__twt__teardown__params__t" kindref="compound">whd_twt_teardown_params_t</ref> *</type>
          <declname>twt_params</declname>
        </param>
        <briefdescription>
<para>Trigger teardown all individual or broadcast TWT sessions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twt_params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to twt_taerdown parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gad09c074ff80494d9df7ec9013736a856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_twt_information_frame</definition>
        <argsstring>(whd_interface_t ifp, whd_twt_information_params_t *twt_params)</argsstring>
        <name>whd_wifi_twt_information_frame</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__twt__information__params__t" kindref="compound">whd_twt_information_params_t</ref> *</type>
          <declname>twt_params</declname>
        </param>
        <briefdescription>
<para>Trigger TWT information frame(used by STA) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twt_params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to twt_information parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1049" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga3042bc2348ca131559f6e68723678702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_btwt_config</definition>
        <argsstring>(whd_interface_t ifp, whd_btwt_config_params_t *twt_params)</argsstring>
        <name>whd_wifi_btwt_config</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="structwhd__btwt__config__params__t" kindref="compound">whd_btwt_config_params_t</ref> *</type>
          <declname>twt_params</declname>
        </param>
        <briefdescription>
<para>Configure TWT IE in beacon(used by AP) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>twt_params</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to btwt_config parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1058" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga66489d815bb8d09075335a520f679b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_coex_config</definition>
        <argsstring>(whd_interface_t ifp, whd_coex_config_t *coex_config)</argsstring>
        <name>whd_wifi_set_coex_config</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a1cb4da9972e0e9317a6e26e2fd460902" kindref="member">whd_coex_config_t</ref> *</type>
          <declname>coex_config</declname>
        </param>
        <briefdescription>
<para>Set coex configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coex_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure whd_coex_config_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1067" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaa3e2a5884bd9471a27d0fbe071b10ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_set_auth_status</definition>
        <argsstring>(whd_interface_t ifp, whd_auth_req_status_t *status)</argsstring>
        <name>whd_wifi_set_auth_status</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a30e2e99a6c6f124f4f7a200e31f7a8cc" kindref="member">whd_auth_req_status_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Set auth status used for External AUTH(SAE) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Auth_Status structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1076" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga1441ae647ff194b94413cbe2016be113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_get_fwcap</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *value)</argsstring>
        <name>whd_wifi_get_fwcap</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get FW(chip) Capability. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum value of the current FW capability, ex: sae or sae_ext or ...etc, (enum value map to whd_fwcap_id_t) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WHD_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gae6bf707d845518cba9a8256fb5681f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_version</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *version)</argsstring>
        <name>whd_arp_version</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Get version of Device (WLAN) Firmware. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">version</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to store version #</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1094" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga2cd55bdc13221177c61310ecaa6f4bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_peerage_get</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *seconds)</argsstring>
        <name>whd_arp_peerage_get</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Get ARP Offload Peer Age from Device (WLAN) Length of time in seconds before aging out an entry in the WLAN processor ARP table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to store value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gab61ae9878853c02b4cf194c2c3a7377f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_peerage_set</definition>
        <argsstring>(whd_interface_t ifp, uint32_t seconds)</argsstring>
        <name>whd_arp_peerage_set</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Set ARP Offload Peer Age in Device (WLAN) Length of time in seconds before aging out an entry in the WLAN processor ARP table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>: Seconds to age out IP</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga22d76514755f2dfde0ee6acbc193787a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_arpoe_get</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *agent_enable)</argsstring>
        <name>whd_arp_arpoe_get</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>agent_enable</declname>
        </param>
        <briefdescription>
<para>Get ARP Offload Agent Enable from Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">agent_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to store value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaa30d9e2a761de17962312d818f941c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_arpoe_set</definition>
        <argsstring>(whd_interface_t ifp, uint32_t agent_enable)</argsstring>
        <name>whd_arp_arpoe_set</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>agent_enable</declname>
        </param>
        <briefdescription>
<para>Set ARP Offload Agent Enable in Device (WLAN) Set Enable/Disable of ARP Offload Agent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">agent_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>: Enable=1 / Disable=0</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga01ece00a357914d02fa5a181fbddbf8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_cache_clear</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_arp_cache_clear</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Clear ARP Offload cache in Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga54728d3d6a714ef9264d6e25df9a6722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_features_get</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *features)</argsstring>
        <name>whd_arp_features_get</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>Get ARP Offload Feature Flags from Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">features</parametername>
</parameternamelist>
<parameterdescription>
<para>: ptr to store currently set features - bit flags CY_ARP_OL_AGENT_ENABLE, etc. ARL_OL_AGENT | ARL_OL_SNOOP | ARP_OL_HOST_AUTO_REPLY | ARP_OL_PEER_AUTO_REPLY</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gab4ebcd7fdd7b328e2f4e10b79197cfca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_features_set</definition>
        <argsstring>(whd_interface_t ifp, uint32_t features)</argsstring>
        <name>whd_arp_features_set</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>features</declname>
        </param>
        <briefdescription>
<para>Set ARP Offload Feature Flags in Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">features</parametername>
</parameternamelist>
<parameterdescription>
<para>: features to set value (you can OR (&apos;|&apos;) multiple flags) CY_ARP_OL_AGENT_ENABLE, etc. ARL_OL_AGENT | ARL_OL_SNOOP | ARP_OL_HOST_AUTO_REPLY | ARP_OL_PEER_AUTO_REPLY</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaf70b6becc3e4ecc551f5bf5278d7ad93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_features_print</definition>
        <argsstring>(uint32_t features, const char *title)</argsstring>
        <name>whd_arp_features_print</name>
        <param>
          <type>uint32_t</type>
          <declname>features</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Print ARP Offload Feature Flags in Human readable form to console. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">features</parametername>
</parameternamelist>
<parameterdescription>
<para>: feature flags to set (you can OR &apos;|&apos; multiple flags) CY_ARP_OL_AGENT_ENABLE, etc. ARL_OL_AGENT | ARL_OL_SNOOP | ARP_OL_HOST_AUTO_REPLY | ARP_OL_PEER_AUTO_REPLY </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>: Optional: Title for output (NULL == no title)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga417b404b9892862a572802a4ea38eb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_hostip_list_add</definition>
        <argsstring>(whd_interface_t ifp, uint32_t *host_ipv4_list, uint32_t count)</argsstring>
        <name>whd_arp_hostip_list_add</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>host_ipv4_list</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Add ARP Offload Host IP Identifier(s) to HostIP List to Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">host_ipv4_list</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to host_ip data (IPv4, 1 uint32_t per ip addr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Number of array elements in host_ip</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga61135784226a59af098384f4a071af02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_hostip_list_add_string</definition>
        <argsstring>(whd_interface_t ifp, const char *ip_addr)</argsstring>
        <name>whd_arp_hostip_list_add_string</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ip_addr</declname>
        </param>
        <briefdescription>
<para>Add One ARP Offload Host IP Identifier to HostIP List (mbed-style IP string) to Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ip_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to ip string (as returned from mbedos calls)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga15cfc56bd481a4bc02c6dc93bfa6883c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_hostip_list_clear_id</definition>
        <argsstring>(whd_interface_t ifp, uint32_t ipv4_addr)</argsstring>
        <name>whd_arp_hostip_list_clear_id</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ipv4_addr</declname>
        </param>
        <briefdescription>
<para>Clear One ARP Offload Host IP Identifier from Host IP List in Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ipv4_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>: ip addr expressed as a uint32_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaa38f97cc9800e7355d96d833b32b1c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_hostip_list_clear_id_string</definition>
        <argsstring>(whd_interface_t ifp, const char *ip_addr)</argsstring>
        <name>whd_arp_hostip_list_clear_id_string</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ip_addr</declname>
        </param>
        <briefdescription>
<para>Clear One ARP Offload Host IP Identifier from Host IP List (mbed-style IP string) in Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ip_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to ip string (as returned from mbedos calls)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaaf3cec4a4896670049ec3802c91a2d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_hostip_list_clear</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_arp_hostip_list_clear</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Clear all ARP Offload Host IP Identifier List. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga4287cc85981a511399ea927c84f61330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_hostip_list_get</definition>
        <argsstring>(whd_interface_t ifp, uint32_t count, uint32_t *host_ipv4_list, uint32_t *filled)</argsstring>
        <name>whd_arp_hostip_list_get</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>host_ipv4_list</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>filled</declname>
        </param>
        <briefdescription>
<para>Get ARP Offload Host IP Identifiers from Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>: Number of array elements in host_ip </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">host_ipv4_list</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to structure array to store host_ip data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">filled</parametername>
</parameternamelist>
<parameterdescription>
<para>: Number of array elements filled by this routine</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga564e95d3343802ed33d1b2c6fb531aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_stats_clear</definition>
        <argsstring>(whd_interface_t ifp)</argsstring>
        <name>whd_arp_stats_clear</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <briefdescription>
<para>Clear ARP Offload statistics in Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga9d65fe0a82dee5edf65eb6f1efe9df52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_stats_get</definition>
        <argsstring>(whd_interface_t ifp, whd_arp_stats_t *stats)</argsstring>
        <name>whd_arp_stats_get</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_arp_stats_t *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Get ARP Offload statistics from Device (WLAN) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stats</parametername>
</parameternamelist>
<parameterdescription>
<para>: Ptr to store statistics whd_arp_stats_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga37714a68f350e5a9e24dd6aeaea0ae98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_arp_stats_print</definition>
        <argsstring>(whd_arp_stats_t *arp_stats, const char *title)</argsstring>
        <name>whd_arp_stats_print</name>
        <param>
          <type>whd_arp_stats_t *</type>
          <declname>arp_stats</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Print ARP Offload statistics NOTE: call <ref refid="group__wifiutilities_1ga9d65fe0a82dee5edf65eb6f1efe9df52" kindref="member">whd_arp_stats_get()</ref>, then print them using this function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">arp_stats</parametername>
</parameternamelist>
<parameterdescription>
<para>: Ptr to ARP statistics structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>: Optional: Title for output (NULL == no title)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gae81aead624f8e374970e1aa3f330ea30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_pf_add_packet_filter</definition>
        <argsstring>(whd_interface_t ifp, const whd_packet_filter_t *settings)</argsstring>
        <name>whd_pf_add_packet_filter</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>const <ref refid="structwhd__packet__filter__t" kindref="compound">whd_packet_filter_t</ref> *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>A filter must be added (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>created) before it can be enabled. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">settings</parametername>
</parameternamelist>
<parameterdescription>
<para>: Ptr to filter settings <ref refid="structwhd__packet__filter__t" kindref="compound">whd_packet_filter_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaff414d31f3406ec5d1af54b889f4849a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_pf_remove_packet_filter</definition>
        <argsstring>(whd_interface_t ifp, uint8_t filter_id)</argsstring>
        <name>whd_pf_remove_packet_filter</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_id</declname>
        </param>
        <briefdescription>
<para>Remove a previously added filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: filter to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga3e70cd84bf811b869c955d75fa80590d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_pf_enable_packet_filter</definition>
        <argsstring>(whd_interface_t ifp, uint8_t filter_id)</argsstring>
        <name>whd_pf_enable_packet_filter</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_id</declname>
        </param>
        <briefdescription>
<para>After a filter has been added it can be enabled or disabled as needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: filter to enable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga6af0c7e202709713fa5d06e71a585e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_pf_disable_packet_filter</definition>
        <argsstring>(whd_interface_t ifp, uint8_t filter_id)</argsstring>
        <name>whd_pf_disable_packet_filter</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_id</declname>
        </param>
        <briefdescription>
<para>After a filter has been added it can be enabled or disabled as needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: filter to disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga35860e8c45162735f5ef3d93ed262d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_toggle_packet_filter</definition>
        <argsstring>(whd_interface_t ifp, uint8_t filter_id, whd_bool_t enable)</argsstring>
        <name>whd_wifi_toggle_packet_filter</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_id</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a7cd94a03f2e7e6aab7217ed559c7a0ac" kindref="member">whd_bool_t</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>After a filter has been added it can be enabled or disabled as needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: filter to disable/enable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>: Enable/Disable Flag </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gacd9d57c8febb11cc240db23f5de92cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_pf_get_packet_filter_mask_and_pattern</definition>
        <argsstring>(whd_interface_t ifp, uint8_t filter_id, uint32_t max_size, uint8_t *mask, uint8_t *pattern, uint32_t *size_out)</argsstring>
        <name>whd_pf_get_packet_filter_mask_and_pattern</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_size</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size_out</declname>
        </param>
        <briefdescription>
<para>Filters are implemented in WLAN subsystem as a bit pattern and matching bit mask that are applied to incoming packets. </para>
        </briefdescription>
        <detaileddescription>
<para>This API retrieves the pattern and mask. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: which filter to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>: size of both mask and pattern buffers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>: mask for this filter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>: pattern for this filter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">size_out</parametername>
</parameternamelist>
<parameterdescription>
<para>: length of both mask and pattern </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gab3e9371ccaa61f1f40e0246a66db42a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_wifi_clear_packet_filter_stats</definition>
        <argsstring>(whd_interface_t ifp, uint32_t filter_id)</argsstring>
        <name>whd_wifi_clear_packet_filter_stats</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>filter_id</declname>
        </param>
        <briefdescription>
<para>Clear the packet filter stats associated with a filter id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: which filter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga26172adb5ec181bb8f2009e47eb252cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_pf_get_packet_filter_stats</definition>
        <argsstring>(whd_interface_t ifp, uint8_t filter_id, whd_pkt_filter_stats_t *stats)</argsstring>
        <name>whd_pf_get_packet_filter_stats</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_id</declname>
        </param>
        <param>
          <type>whd_pkt_filter_stats_t *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Return the stats associated with a filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_id</parametername>
</parameternamelist>
<parameterdescription>
<para>: which filter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stats</parametername>
</parameternamelist>
<parameterdescription>
<para>: Ptr to store statistics wl_pkt_filter_stats_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gaf6c70f49c254a8d7ef7397e7d83e0c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_tko_param</definition>
        <argsstring>(whd_interface_t ifp, whd_tko_retry_t *whd_tko_retry, uint8_t set)</argsstring>
        <name>whd_tko_param</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_tko_retry_t *</type>
          <declname>whd_tko_retry</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Set/Get TKO retry &amp; interval parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">whd_tko_retry</parametername>
</parameternamelist>
<parameterdescription>
<para>: whd retry &amp; interval parameters structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>: Set(1)/Get(0) Flag </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gae6b46bcc1a3c7d708abc71ae6a123481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_tko_get_status</definition>
        <argsstring>(whd_interface_t ifp, whd_tko_status_t *tko_status)</argsstring>
        <name>whd_tko_get_status</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_tko_status_t *</type>
          <declname>tko_status</declname>
        </param>
        <briefdescription>
<para>Return the tko status for all indexes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tko_status</parametername>
</parameternamelist>
<parameterdescription>
<para>: Ptr to store tko_status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga70cacca6b62ca658882d9070c49b6343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_tko_max_assoc</definition>
        <argsstring>(whd_interface_t ifp, uint8_t *max)</argsstring>
        <name>whd_tko_max_assoc</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Return the stats associated with a filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">max</parametername>
</parameternamelist>
<parameterdescription>
<para>: returns Max TCP connections supported by WLAN Firmware </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1gacc2882e3a308f7b2b938bc5741ab43c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_tko_get_FW_connect</definition>
        <argsstring>(whd_interface_t ifp, uint8_t index, whd_tko_connect_t *whd_connect, uint16_t buflen)</argsstring>
        <name>whd_tko_get_FW_connect</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>whd_tko_connect_t *</type>
          <declname>whd_connect</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
<para>Return the stats associated with a filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>: index for TCP offload connection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">whd_connect</parametername>
</parameternamelist>
<parameterdescription>
<para>: tko_connect structure buffer from Firmware </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buflen</parametername>
</parameternamelist>
<parameterdescription>
<para>: Buffer given for tko_connect </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga189ed043d5ce9cf8d1a0845484a96d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_tko_toggle</definition>
        <argsstring>(whd_interface_t ifp, whd_bool_t enable)</argsstring>
        <name>whd_tko_toggle</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type><ref refid="whd__types_8h_1a7cd94a03f2e7e6aab7217ed559c7a0ac" kindref="member">whd_bool_t</ref></type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Return the stats associated with a filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>: Enable/Disable TCP Keepalive offload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wifiutilities_1ga253f6986d31c192750003ff912fa7f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="whd__types_8h_1add62f4b5040a2451e23869d2f9e1ae05" kindref="member">whd_result_t</ref></type>
        <definition>whd_result_t whd_tko_filter</definition>
        <argsstring>(whd_interface_t ifp, whd_tko_auto_filter_t *whd_filter, uint8_t filter_flag)</argsstring>
        <name>whd_tko_filter</name>
        <param>
          <type><ref refid="whd_8h_1a2e544c482ddbb690bbb95ce7174e79a0" kindref="member">whd_interface_t</ref></type>
          <declname>ifp</declname>
        </param>
        <param>
          <type>whd_tko_auto_filter_t *</type>
          <declname>whd_filter</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filter_flag</declname>
        </param>
        <briefdescription>
<para>Return the stats associated with a filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ifp</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to handle instance of whd interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">whd_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>: wl_filter structure buffer from Firmware </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">filter_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>To set filter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whd_result_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ChuangJiaShy/Documents/01.SRC/repo/whd_mclass/whd/inc/whd_wifi_api.h" line="1366" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows WHD to perform utility operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
